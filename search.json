[{"path":"http://corymccartan.com/bases/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Cory McCartan Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://corymccartan.com/bases/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Cory McCartan. Author, maintainer.","code":""},{"path":"http://corymccartan.com/bases/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McCartan C (2025). bases: Basis Expansions Regression Modeling. R package version 0.0.0.9000, http://corymccartan.com/bases/.","code":"@Manual{,   title = {bases: Basis Expansions for Regression Modeling},   author = {Cory McCartan},   year = {2025},   note = {R package version 0.0.0.9000},   url = {http://corymccartan.com/bases/}, }"},{"path":"http://corymccartan.com/bases/index.html","id":"bases-","dir":"","previous_headings":"","what":"Basis Expansions for Regression Modeling","title":"Basis Expansions for Regression Modeling","text":"bases provides various basis expansions flexible regression modeling, including random Fourier features, exact kernel / Gaussian process feature maps, BART prior features, helpful interface n-way interactions. provided functions may used within modeling formula, allowing use kernel methods basis expansions modeling functions otherwise support .","code":""},{"path":"http://corymccartan.com/bases/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Basis Expansions for Regression Modeling","text":"can install development version bases :","code":"remotes::install_github(\"CoryMcCartan/bases\")"},{"path":"http://corymccartan.com/bases/index.html","id":"example-random-fourier-features","dir":"","previous_headings":"","what":"Example: random Fourier features","title":"Basis Expansions for Regression Modeling","text":"Fitting approximate kernel regression random Fourier features simple wrapping relevant variables call b_rff(). default kernel Gaussian/RBF kernel length scale 1 applied predictors rescaling unit variance. can provide different kernel = argument swtich kernels. Many common kernels provided package; see ?kernels. can visualize RFF fits versus simple linear model.","code":"library(bases)  # Box & Jenkins (1976) sales data x = 1:150 y = c(BJsales)   lm(y ~ b_rff(x, p = 5)) # 5 random features #>  #> Call: #> lm(formula = y ~ b_rff(x, p = 5)) #>  #> Coefficients: #>      (Intercept)  b_rff(x, p = 5)1  b_rff(x, p = 5)2  b_rff(x, p = 5)3   #>          70200.9             298.4            1463.6           -1334.8   #> b_rff(x, p = 5)4  b_rff(x, p = 5)5   #>           1619.9          -70278.6 lm(y ~ b_rff(x, kernel = k_matern(scale = 0.1, nu = 5/2))) lm(y ~ b_rff(x, kernel = k_rq(scale = 2, alpha = 2))) k = k_rbf(scale = 0.2) plot(x, y, xlab = \"Month\", ylab = \"Sales\") lines(x, fitted(lm(y ~ x)), lty = \"dashed\", lwd = 1.5) for (i in 1:20) {     m_rff = lm(y ~ b_rff(x, p = 20, kernel = k))     lines(x, fitted(m_rff), col = \"#4584\") }"},{"path":"http://corymccartan.com/bases/reference/b_rff.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Fourier feature basis — b_rff","title":"Random Fourier feature basis — b_rff","text":"Generates random Fourier feature basis matrix provided kernel, optionally rescaling data lie unit hypercube. Random features form $$   \\phi(x) = \\cos(\\omega^T x + b), $$ \\(\\omega\\) vector frequencies sampled Fourier transform kernel, \\(b\\sim\\mathrm{Unif}[-\\pi, \\pi]\\) random phase shift. input data x may shifted rescaled feature mapping applied, according stdize argument.","code":""},{"path":"http://corymccartan.com/bases/reference/b_rff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random Fourier feature basis — b_rff","text":"","code":"b_rff(   ...,   p = 100,   kernel = k_rbf(),   stdize = c(\"scale\", \"box\", \"symbox\", \"none\"),   n_approx = nextn(4 * p),   freqs = NULL,   phases = NULL,   shift = NULL,   scale = NULL )"},{"path":"http://corymccartan.com/bases/reference/b_rff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random Fourier feature basis — b_rff","text":"... variable(s) build features . single data frame matrix may provided well. p number random features. kernel kernel function. one recognized kernel functions k_rbf() provided, computations exact. Otherwise, fast Fourier transform provided kernel function used generate random features. kernel shift-invariant decay zero positive negative infinity. stdize standardize predictors, . default \"scale\" applies scale() input features mean zero unit variance, \"box\" scales data along dimension lie unit hypercube, \"symbox\" scales data along dimension lie \\([-0.5, 0.5]^d\\). n_approx number discrete frequencies use calculating Fourier transform provided kernel.  used certain kernels analytic Fourier transform available; see . freqs Matrix frequencies use, ncol(freqs) matching number predictors. provided, overrides calculated automatically, thus ignoring p kernel. phases Vector phase shifts use. provided, overrides calculated automatically, thus ignoring p kernel. shift Vector shifts, single shift value, use. provided, overrides calculated according stdize. scale Vector scales, single scale value, use. provided, overrides calculated according stdize.","code":""},{"path":"http://corymccartan.com/bases/reference/b_rff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random Fourier feature basis — b_rff","text":"matrix random Fourier features.","code":""},{"path":"http://corymccartan.com/bases/reference/b_rff.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Random Fourier feature basis — b_rff","text":"Rahimi, ., & Recht, B. (2007). Random features large-scale kernel machines. Advances neural information processing systems, 20.","code":""},{"path":"http://corymccartan.com/bases/reference/b_rff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random Fourier feature basis — b_rff","text":"","code":"data(quakes)  lm(depth ~ b_rff(lat, long, p=16), quakes) #>  #> Call: #> lm(formula = depth ~ b_rff(lat, long, p = 16), data = quakes) #>  #> Coefficients: #>                (Intercept)   b_rff(lat, long, p = 16)1   #>                    1776.24                     2076.33   #>  b_rff(lat, long, p = 16)2   b_rff(lat, long, p = 16)3   #>                     964.69                      -39.91   #>  b_rff(lat, long, p = 16)4   b_rff(lat, long, p = 16)5   #>                    -387.45                    -2927.69   #>  b_rff(lat, long, p = 16)6   b_rff(lat, long, p = 16)7   #>                     236.78                      697.56   #>  b_rff(lat, long, p = 16)8   b_rff(lat, long, p = 16)9   #>                     197.52                     -129.22   #> b_rff(lat, long, p = 16)10  b_rff(lat, long, p = 16)11   #>                   -2066.33                     -377.20   #> b_rff(lat, long, p = 16)12  b_rff(lat, long, p = 16)13   #>                    3009.06                      155.98   #> b_rff(lat, long, p = 16)14  b_rff(lat, long, p = 16)15   #>                   -5329.97                      126.53   #> b_rff(lat, long, p = 16)16   #>                    -730.68   #>  lm(depth ~ b_rff(lat, long, p=8, kernel=k_rbf(scale=0.5)), quakes) #>  #> Call: #> lm(formula = depth ~ b_rff(lat, long, p = 8, kernel = k_rbf(scale = 0.5)),  #>     data = quakes) #>  #> Coefficients: #>                                           (Intercept)   #>                                               212.478   #> b_rff(lat, long, p = 8, kernel = k_rbf(scale = 0.5))1   #>                                                -5.066   #> b_rff(lat, long, p = 8, kernel = k_rbf(scale = 0.5))2   #>                                               417.081   #> b_rff(lat, long, p = 8, kernel = k_rbf(scale = 0.5))3   #>                                                38.154   #> b_rff(lat, long, p = 8, kernel = k_rbf(scale = 0.5))4   #>                                              -103.652   #> b_rff(lat, long, p = 8, kernel = k_rbf(scale = 0.5))5   #>                                              -277.305   #> b_rff(lat, long, p = 8, kernel = k_rbf(scale = 0.5))6   #>                                              -330.216   #> b_rff(lat, long, p = 8, kernel = k_rbf(scale = 0.5))7   #>                                               -16.102   #> b_rff(lat, long, p = 8, kernel = k_rbf(scale = 0.5))8   #>                                              -438.076   #>  lm(depth ~ b_rff(lat, long, p=20, kernel=k_rbf(scale=5), stdize=\"none\"), quakes) #>  #> Call: #> lm(formula = depth ~ b_rff(lat, long, p = 20, kernel = k_rbf(scale = 5),  #>     stdize = \"none\"), data = quakes) #>  #> Coefficients: #>                                                            (Intercept)   #>                                                                 424.02   #>  b_rff(lat, long, p = 20, kernel = k_rbf(scale = 5), stdize = \"none\")1   #>                                                               -1928.43   #>  b_rff(lat, long, p = 20, kernel = k_rbf(scale = 5), stdize = \"none\")2   #>                                                                 614.98   #>  b_rff(lat, long, p = 20, kernel = k_rbf(scale = 5), stdize = \"none\")3   #>                                                                 637.60   #>  b_rff(lat, long, p = 20, kernel = k_rbf(scale = 5), stdize = \"none\")4   #>                                                                -879.01   #>  b_rff(lat, long, p = 20, kernel = k_rbf(scale = 5), stdize = \"none\")5   #>                                                              -18519.07   #>  b_rff(lat, long, p = 20, kernel = k_rbf(scale = 5), stdize = \"none\")6   #>                                                                 -73.48   #>  b_rff(lat, long, p = 20, kernel = k_rbf(scale = 5), stdize = \"none\")7   #>                                                               -2701.68   #>  b_rff(lat, long, p = 20, kernel = k_rbf(scale = 5), stdize = \"none\")8   #>                                                                2315.78   #>  b_rff(lat, long, p = 20, kernel = k_rbf(scale = 5), stdize = \"none\")9   #>                                                                 -77.36   #> b_rff(lat, long, p = 20, kernel = k_rbf(scale = 5), stdize = \"none\")10   #>                                                               -8343.52   #> b_rff(lat, long, p = 20, kernel = k_rbf(scale = 5), stdize = \"none\")11   #>                                                                 193.50   #> b_rff(lat, long, p = 20, kernel = k_rbf(scale = 5), stdize = \"none\")12   #>                                                                2735.79   #> b_rff(lat, long, p = 20, kernel = k_rbf(scale = 5), stdize = \"none\")13   #>                                                                -195.64   #> b_rff(lat, long, p = 20, kernel = k_rbf(scale = 5), stdize = \"none\")14   #>                                                               -3171.10   #> b_rff(lat, long, p = 20, kernel = k_rbf(scale = 5), stdize = \"none\")15   #>                                                               -2196.33   #> b_rff(lat, long, p = 20, kernel = k_rbf(scale = 5), stdize = \"none\")16   #>                                                                4073.88   #> b_rff(lat, long, p = 20, kernel = k_rbf(scale = 5), stdize = \"none\")17   #>                                                                 328.49   #> b_rff(lat, long, p = 20, kernel = k_rbf(scale = 5), stdize = \"none\")18   #>                                                                  81.56   #> b_rff(lat, long, p = 20, kernel = k_rbf(scale = 5), stdize = \"none\")19   #>                                                               -7651.58   #> b_rff(lat, long, p = 20, kernel = k_rbf(scale = 5), stdize = \"none\")20   #>                                                                -425.00   #>"},{"path":"http://corymccartan.com/bases/reference/bases-package.html","id":null,"dir":"Reference","previous_headings":"","what":"bases: Basis Expansions for Regression Modeling — bases-package","title":"bases: Basis Expansions for Regression Modeling — bases-package","text":"Provides various basis expansions flexible regression modeling, including random Fourier features (Rahimi & Recht, 2007), exact kernel / Gaussian process feature maps, BART (Chipman et al., 2010) doi:10.1214/09-AOAS285  prior features, helpful interface n-way interactions. provided functions may used within modeling formula, allowing use kernel methods basis expansions modeling functions otherwise support .","code":""},{"path":[]},{"path":"http://corymccartan.com/bases/reference/bases-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"bases: Basis Expansions for Regression Modeling — bases-package","text":"Maintainer: Cory McCartan mccartan@psu.edu (ORCID)","code":""},{"path":"http://corymccartan.com/bases/reference/kernels.html","id":null,"dir":"Reference","previous_headings":"","what":"Kernel functions — kernels","title":"Kernel functions — kernels","text":"functions return vectorized kernel functions can used calculate kernel matrices, provided directly basis functions. functions designed take maximum value one identical inputs provided.","code":""},{"path":"http://corymccartan.com/bases/reference/kernels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kernel functions — kernels","text":"","code":"k_rbf(scale = 1)  k_lapl(scale = 1)  k_rq(scale = 1, alpha = 2)  k_matern(scale = 1, nu = 1.5)"},{"path":"http://corymccartan.com/bases/reference/kernels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kernel functions — kernels","text":"scale kernel length scale. alpha shape/df parameter. \\(\\alpha=1\\) Cauchy kernel. nu smoothness parameter. \\(\\nu=0.5\\) Ornstein–Uhlenbeck kernel.","code":""},{"path":"http://corymccartan.com/bases/reference/kernels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kernel functions — kernels","text":"function calculates kernel matrix vector arguments x y.","code":""},{"path":"http://corymccartan.com/bases/reference/kernels.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Kernel functions — kernels","text":"k_rbf(): Radial basis function kernel k_lapl(): Laplace kernel k_rq(): Rational quadratic kernel. k_matern(): Matern kernel.","code":""}]
