// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// bart.cpp
integers_matrix<> forest_mat(const doubles_matrix<> x, const integers depths, const integers vars, const doubles thresh);
extern "C" SEXP _bases_forest_mat(SEXP x, SEXP depths, SEXP vars, SEXP thresh) {
  BEGIN_CPP11
    return cpp11::as_sexp(forest_mat(cpp11::as_cpp<cpp11::decay_t<const doubles_matrix<>>>(x), cpp11::as_cpp<cpp11::decay_t<const integers>>(depths), cpp11::as_cpp<cpp11::decay_t<const integers>>(vars), cpp11::as_cpp<cpp11::decay_t<const doubles>>(thresh)));
  END_CPP11
}
// dist.cpp
doubles_matrix<> dist_l2(const doubles_matrix<> x, const doubles_matrix<> y);
extern "C" SEXP _bases_dist_l2(SEXP x, SEXP y) {
  BEGIN_CPP11
    return cpp11::as_sexp(dist_l2(cpp11::as_cpp<cpp11::decay_t<const doubles_matrix<>>>(x), cpp11::as_cpp<cpp11::decay_t<const doubles_matrix<>>>(y)));
  END_CPP11
}
// dist.cpp
doubles_matrix<> dist_l1(const doubles_matrix<> x, const doubles_matrix<> y);
extern "C" SEXP _bases_dist_l1(SEXP x, SEXP y) {
  BEGIN_CPP11
    return cpp11::as_sexp(dist_l1(cpp11::as_cpp<cpp11::decay_t<const doubles_matrix<>>>(x), cpp11::as_cpp<cpp11::decay_t<const doubles_matrix<>>>(y)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_bases_dist_l1",    (DL_FUNC) &_bases_dist_l1,    2},
    {"_bases_dist_l2",    (DL_FUNC) &_bases_dist_l2,    2},
    {"_bases_forest_mat", (DL_FUNC) &_bases_forest_mat, 4},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_bases(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
